import java.util.*;
class User {
    private String username;
    private String password; // In a real app, store hashed password!

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public boolean checkPassword(String password) {
        return this.password.equals(password);
    }
}
class AuthManager {
    private Map<String, User> users = new HashMap<>();

    public boolean signUp(String username, String password) {
        if (users.containsKey(username)) {
            System.out.println("Username already exists!");
            return false;
        }
        users.put(username, new User(username, password));
        System.out.println("User registered successfully!");
        return true;
    }

    public User login(String username, String password) {
        User user = users.get(username);
        if (user != null && user.checkPassword(password)) {
            System.out.println("Login successful!");
            return user;
        }
        System.out.println("Invalid credentials!");
        return null;
    }
}
class Question {
    private String title;
    private String[] options;
    private int correctAnswer;

    public Question(String title, String[] options, int correctAnswer) {
        this.title = title;
        this.options = options;
        this.correctAnswer = correctAnswer;
    }

    public boolean isCorrect(int answer) {
        return answer == correctAnswer;
    }

    public void displayQuestion() {
        System.out.println(title);
        for (int i = 0; i < options.length; i++) {
            System.out.println((i + 1) + ": " + options[i]);
        }
    }
}
class Quiz {
    private String quizTitle;
    private List<Question> questions;

    public Quiz(String quizTitle) {
        this.quizTitle = quizTitle;
        this.questions = new ArrayList<>();
    }

    public void addQuestion(Question question) {
        questions.add(question);
    }

    public void startQuiz() {
        Scanner scanner = new Scanner(System.in);
        int score = 0;
        for (Question question : questions) {
            question.displayQuestion();
            System.out.print("Enter your answer: ");
            int answer = scanner.nextInt();
            if (question.isCorrect(answer - 1)) {
                System.out.println("Correct!");
                score++;
            } else {
                System.out.println("Incorrect!");
            }
        }
        System.out.println("Your score: " + score + "/" + questions.size());
    }
}
public class QuizApplication {
    private static AuthManager authManager = new AuthManager();
    private static Map<String, Quiz> quizzes = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Sign Up\n2. Log In\n3. Add Quiz\n4. Take Quiz\n5. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    System.out.print("Enter username: ");
                    String username = scanner.nextLine();
                    System.out.print("Enter password: ");
                    String password = scanner.nextLine();
                    authManager.signUp(username, password);
                    break;

                case 2:
                    System.out.print("Enter username: ");
                    username = scanner.nextLine();
                    System.out.print("Enter password: ");
                    password = scanner.nextLine();
                    authManager.login(username, password);
                    break;

                case 3:
                    System.out.print("Enter quiz title: ");
                    String quizTitle = scanner.nextLine();
                    Quiz quiz = new Quiz(quizTitle);
                    System.out.print("Enter number of questions: ");
                    int numQuestions = scanner.nextInt();
                    scanner.nextLine();

                    for (int i = 0; i < numQuestions; i++) {
                        System.out.print("Enter question title: ");
                        String title = scanner.nextLine();
                        String[] options = new String[4];
                        for (int j = 0; j < 4; j++) {
                            System.out.print("Enter option " + (j + 1) + ": ");
                            options[j] = scanner.nextLine();
                        }
                        System.out.print("Enter correct option number (1-4): ");
                        int correctAnswer = scanner.nextInt() - 1;
                        scanner.nextLine();

                        quiz.addQuestion(new Question(title, options, correctAnswer));
                    }
                    quizzes.put(quizTitle, quiz);
                    System.out.println("Quiz added successfully!");
                    break;

                case 4:
                    System.out.println("Available quizzes:");
                    for (String title : quizzes.keySet()) {
                        System.out.println("- " + title);
                    }
                    System.out.print("Enter quiz title to take: ");
                    quizTitle = scanner.nextLine();
                    Quiz selectedQuiz = quizzes.get(quizTitle);
                    if (selectedQuiz != null) {
                        selectedQuiz.startQuiz();
                    } else {
                        System.out.println("Quiz not found!");
                    }
                    break;

                case 5:
                    System.out.println("Exiting...");
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice!");
                    break;
            }
        }
    }
}
